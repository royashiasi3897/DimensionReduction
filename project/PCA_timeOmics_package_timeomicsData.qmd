---
title: "PCA (timeOmics)"
format: 
  docx:
    reference-doc:  C:\Users\49176\Downloads
editor: visual
execute: 
  echo: false
  warning: false
  output: asis
fig-dpi: 300
fig-width: 6
fig-height: 8
tbl-cap-location: top
---

## **PCA timeOmics Package with timeOmics data**

```{r loading timeomics package}
###Lastest Bioconductor Release
## install BiocManager if not installed
if (!requireNamespace("BiocManager", quietly = TRUE))
    install.packages("BiocManager")
## install timeOmics
BiocManager::install('timeOmics')

##Lastest Github version
install.packages("devtools")
# then load
library(devtools)
install_github("abodein/timeOmics")

#Load the package
library(timeOmics)
##Useful package to run this vignette
library(tidyverse)
library(conflicted)
library(writexl)
library(readxl)
```

```{r loading timeomics data}
data("timeOmics.simdata")
sim.data <- timeOmics.simdata$sim

dim(sim.data) 
head(sim.data[,1:6])


```

# **Data preprocessing**

In a longitudinal context, one can be interested only in features that vary over time and filter out molecules with a low variation coefficient.

To do so, we can first naively set a threshold on the variation coefficient and keep those features that exceed the threshold.

```{r Time-specific}

remove.low.cv <- function(X, cutoff = 0.5){
  # var.coef
  cv <- unlist(lapply(as.data.frame(X), 
                      function(x) abs(sd(x)/mean(x))))
  return(X[,cv > cutoff])
}

data.filtered <- remove.low.cv(sim.data, 0.5)

```

# **Time Modelling**

The next step is the modelling of each feature (molecule) as a function of time.

it fit the data of each feature based on different time points to a spline.

```{r lmms}
devtools::install_github("cran/lmms", force = TRUE)
library(lmms)

# numeric vector containing the sample time point information
time <- timeOmics.simdata$time
head(time)

# example of lmms
lmms.output <- lmms::lmmSpline(data = data.filtered, time = time,
                         sampleID = rownames(data.filtered), deri = FALSE,
                         basis = "p-spline", numCores = 4, timePredict = 1:9,
                         keepModels = TRUE)
modelled.data <- t(slot(lmms.output, 'predSpline'))

```

## Let's plot the modeled profiles.

```{r vizualization}
# gather data
data.gathered <- modelled.data %>% as.data.frame() %>% 
  rownames_to_column("time") %>%
  mutate(time = as.numeric(time)) %>%
  pivot_longer(names_to="feature", values_to = 'value', -time)

# plot profiles
ggplot(data.gathered, aes(x = time, y = value, color = feature)) + geom_line() +
  theme_bw() + ggtitle("`lmms` profiles") + ylab("Feature expression") +
  xlab("Time")
```

## **Profile filtering**

#### for removing noisy profile

use the filtered data for PCA

```{r noise filtering}
filter.res <- lmms.filter.lines(data = data.filtered, 
                                lmms.obj = lmms.output, time = time)
profile.filtered <- filter.res$filtered
```

## **Single-Omic longitudinal clustering**

```{r PCA}
# run pca
pca.res <- pca(X = profile.filtered, ncomp = 5, scale=FALSE, center=FALSE)

# tuning ncomp
pca.ncomp <- getNcomp(pca.res, max.ncomp = 5, X = profile.filtered, 
                      scale = FALSE, center=FALSE)

pca.ncomp$choice.ncomp

#plot
plot(pca.ncomp)


```

```{r pca according silhouette coefficient}
# final model
pca.res <- pca(X = profile.filtered, ncomp = 2, scale = FALSE, center=FALSE)

# extract cluster
pca.cluster <- getCluster(pca.res)
head(pca.cluster)

```

#### question? i have expected to run PCA based on these model!!! because i wanted to consider the variation of the data in different time points? Tim answer to this question so i have to perform for every time point one PCA and cluster them based on different time point
